database:
  host: ${DATABASE_HOST:jdbc:mysql://localhost:3306}
  name: ${DATABASE_NAME:learner_record}
  use-ssl: ${DATABASE_USESSL:false}
spring:
  datasource:
    url: ${DATASOURCE_URL:${database.host}/${database.name}?useSSL=${database.use-ssl}&requireSSL=false}
    username: ${DATASOURCE_USERNAME:root}
    password: ${DATASOURCE_PASSWORD:my-secret-pw}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jackson:
    default-property-inclusion: non_null
    serialization:
      write_dates_as_timestamps: false
  flyway:
    locations: classpath:db/migration/{vendor}
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:ChangeMe}
  cache:
    redis:
      cache-null-values: false
      key-prefix: ${REDIS_KEY_PREFIX:learner_record_}
      use-key-prefix: ${REDIS_USE_KEY_PREFIX:true}
      time-to-live: ${REDIS_CACHE_DEFAULT_TTL:3600000}
  security:
    user:
      name: ${LEARNER_RECORD_BASIC_USERNAME:changeme}
      password: ${LEARNER_RECORD_BASIC_PASSWORD:changeme}
server:
  port: 9000

logging:
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  level:
    root: ${ROOT_LOGGING_LEVEL:INFO}
management:
  endpoints:
    web:
      base-path: /manage
      exposure:
        include: health
  endpoint:
    health:
      show-details: always
jobs:
  learning-reminders:
    enabled: ${INCOMPLETED_JOB_ENABLED:true}
    cron: ${INCOMPLETE_JOB_CRON:0 0 2 * * *}
    reminder-periods:
      - days: 1
        text: 1 day
      - days: 7
        text: 1 week
      - days: 30
        text: 1 month

oauth:
  serviceUrl: ${OAUTH_SERVICE_URL:http://localhost:8080}
  clientId: ${CLIENT_ID:9fbd4ae2-2db3-44c7-9544-88e80255b56e}
  clientSecret: ${CLIENT_SECRET:test}
  checkTokenEndpoint: ${OAUTH_CHECK_TOKEN_ENDPOINT:/oauth/check_token}
  checkTokenUrl: "${oauth.serviceUrl}${oauth.checkTokenEndpoint}"
  tokenEndpoint: ${OAUTH_TOKEN_ENDPOINT:/oauth/token}
  tokenUrl: "${oauth.serviceUrl}${oauth.tokenEndpoint}"
  jwtKey: ${JWT_KEY:TONterOunSTRUcIenscaDiSHoUrPanti}
  refresh:
    serviceTokenCache:
      beforeSecondsToExpire: ${REFRESH_SERVICETOKENCACHE_BEFORE_SECONDS_TOEXPIRE:0}

identity:
  identitiesUrl: "${IDENTITY_API_IDENTITIES_URL:/api/identities}"
  UidMapUrl: "${identity.identitiesUrl}/map-for-uids"
  identityMapMaxBatchSize: ${IDENTITY_MAP_MAX_BATCH_SIZE:20}

registry-service:
  serviceUrl: ${REGISTRY_SERVICE_URL:http://localhost:9002}
  getResourceByUidUrl: "/civilServants/resource/%s"
  getResourceByOrgCodeUrl: "/civilServants/organisation/%s"

catalogue:
  serviceUrl: ${LEARNING_CATALOGUE_SERVICE_URL:http://localhost:9001}
  courseUrlFormat: "/courses/%s"
  requiredLearningUrlByDaysFormat: "/courses?mandatory=true&days=%s&size=1000000000"

notify:
  serviceUrl: ${NOTIFICATION_SERVICE_URL:http://localhost:9006}
  sendEmailEndpointTemplate: /notifications/emails/{{TEMPLATE_NAME}}/send
  templates:
    requiredLearningDue: ${REQUIRED_LEARNING_DUE:REQUIRED_LEARNING_DUE}
    inviteLearner: ${INVITE_LEARNER:INVITE_LEARNER}
    cancelBooking: ${CANCEL_BOOKING:CANCEL_BOOKING}
    cancelEvent: ${CANCEL_EVENT:CANCEL_EVENT}
    bookingConfirmed: ${BOOKING_CONFIRMED:BOOKING_CONFIRMED}
    bookingConfirmedLineManager: ${BOOKING_CONFIRMED_LINE_MANAGER:BOOKING_CONFIRMED_LINE_MANAGER}
    bookingRequestLineManager: ${BOOKING_REQUEST_LINE_MANAGER:BOOKING_REQUEST_LINE_MANAGER}
    bookingCancelledLineManager: ${BOOKING_CANCELLED_LINE_MANAGER:BOOKING_CANCELLED_LINE_MANAGER}
    bookingRequested: ${BOOKING_REQUESTED:BOOKING_REQUESTED}

lpg-ui:
  serviceUrl: ${LPG_UI_URL:http://localhost:3001}
  bookingUrlFormat: "${lpg-ui.serviceUrl}/book/%s/%s/choose-date"

retention:
  timeInMonths: ${RETENTION_TIME_IN_MONTHS:36}
